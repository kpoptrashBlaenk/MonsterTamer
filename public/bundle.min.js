(() => {
  // src/lib/phaser.ts
  var phaser_default = window.Phaser;

  // src/lib/scenes/scene-keys.ts
  var SCENE_KEYS = Object.freeze({
    PRELOAD_SCENE: "PRELOAD_SCENE",
    BATTLE_SCENE: "BATTLE_SCENE",
    TITLE_SCENE: "TITLE_SCENE"
  });

  // src/assets/asset-keys.ts
  var BATTLE_BACKGROUND_ASSET_KEYS = Object.freeze({
    FOREST: "FOREST"
  });
  var MONSTER_ASSET_KEYS = Object.freeze({
    IGUANIGNITE: "IGUANIGNITE",
    CARNODUSK: "CARNODUSK"
  });
  var BATTLE_ASSET_KEYS = Object.freeze({
    HEALTH_BAR_BACKGROUND: "HEALTH_BAR_BACKGROUND"
  });
  var HEALTH_BAR_ASSET_KEYS = Object.freeze({
    LEFT_CAP: "LEFT_CAP",
    RIGHT_CAP: "RIGHT_CAP",
    MIDDLE: "MIDDLE",
    LEFT_CAP_SHADOW: "LEFT_CAP_SHADOW",
    RIGHT_CAP_SHADOW: "RIGHT_CAP_SHADOW",
    MIDDLE_SHADOW: "MIDDLE_SHADOW"
  });
  var UI_ASSET_KEYS = Object.freeze({
    CURSOR: "CURSOR",
    MENU_BACKGROUND: "MENU_BACKGROUND"
  });
  var DATA_ASSET_KEYS = Object.freeze({
    ATTACKS: "ATTACKS",
    ANIMATIONS: "ANIMATIONS"
  });
  var ATTACK_ASSET_KEYS = Object.freeze({
    ICE_SHARD: "ICE_SHARD",
    ICE_SHARD_START: "ICE_SHARD_START",
    SLASH: "SLASH"
  });
  var TITLE_ASSET_KEYS = Object.freeze({
    BACKGROUND: "BACKGROUND",
    TITLE: "TITLE",
    PANEL: "PANEL"
  });

  // src/assets/font-keys.ts
  var CUSTOM_FONTS = Object.freeze({
    KENNEY: "Kenney-Future-Narrow",
    POKEROGUE: "PokeRogue"
  });

  // src/lib/webfontloader.ts
  var webfontloader_default = window.WebFont;

  // src/assets/web-font-file-loader.ts
  var WebFontFileLoader = class extends phaser_default.Loader.File {
    #fontNames;
    constructor(loader, fontNames) {
      super(loader, {
        type: "webfont",
        key: fontNames.toString()
      });
      this.#fontNames = fontNames;
    }
    load() {
      webfontloader_default.load({
        custom: {
          families: this.#fontNames
        },
        active: () => {
          this.loader.nextFile(this, true);
        },
        inactive: () => {
          console.error(`Failed to load custom fonts ${JSON.stringify(this.#fontNames)}`);
          this.loader.nextFile(this, false);
        }
      });
    }
  };

  // src/utils/data-utils.ts
  var DataUtils = class {
    static getMonsterAttack(scene, attackId) {
      const data = scene.cache.json.get(DATA_ASSET_KEYS.ATTACKS);
      return data.find((attack) => attack.id === attackId);
    }
    static getAnimations(scene) {
      return scene.cache.json.get(DATA_ASSET_KEYS.ANIMATIONS);
    }
  };

  // src/lib/scenes/preload-scene.ts
  var PreloadScene = class extends phaser_default.Scene {
    constructor() {
      super({
        key: SCENE_KEYS.PRELOAD_SCENE
      });
    }
    preload() {
      const monsterTamerAssetPath = "../assets/images/monster-tamer";
      const kenneysAssetPath = "../assets/images/kenneys-assets";
      const pimenAssetPath = "../assets/images/pimen";
      this.load.image(TITLE_ASSET_KEYS.BACKGROUND, `${monsterTamerAssetPath}/ui/title/background.png`);
      this.load.image(TITLE_ASSET_KEYS.PANEL, `${monsterTamerAssetPath}/ui/title/title_background.png`);
      this.load.image(TITLE_ASSET_KEYS.TITLE, `${monsterTamerAssetPath}/ui/title/title_text.png`);
      this.load.image(BATTLE_BACKGROUND_ASSET_KEYS.FOREST, `${monsterTamerAssetPath}/battle-backgrounds/forest-background.png`);
      this.load.image(BATTLE_ASSET_KEYS.HEALTH_BAR_BACKGROUND, `${kenneysAssetPath}/ui-space-expansion/custom-ui.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.RIGHT_CAP, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_green_right.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.MIDDLE, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_green_mid.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.LEFT_CAP, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_green_left.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.RIGHT_CAP_SHADOW, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_shadow_right.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.MIDDLE_SHADOW, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_shadow_mid.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.LEFT_CAP_SHADOW, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_shadow_left.png`);
      this.load.image(MONSTER_ASSET_KEYS.CARNODUSK, `${monsterTamerAssetPath}/monsters/carnodusk.png`);
      this.load.image(MONSTER_ASSET_KEYS.IGUANIGNITE, `${monsterTamerAssetPath}/monsters/iguanignite.png`);
      this.load.image(UI_ASSET_KEYS.CURSOR, `${monsterTamerAssetPath}/ui/cursor.png`);
      this.load.image(UI_ASSET_KEYS.MENU_BACKGROUND, `${kenneysAssetPath}/ui-space-expansion/glassPanel.png`);
      this.load.json(DATA_ASSET_KEYS.ATTACKS, "assets/data/attacks.json");
      this.load.json(DATA_ASSET_KEYS.ANIMATIONS, "assets/data/animations.json");
      this.load.addFile(new WebFontFileLoader(this.load, [CUSTOM_FONTS.POKEROGUE]));
      this.load.spritesheet(ATTACK_ASSET_KEYS.ICE_SHARD, `${pimenAssetPath}/ice-attack/active.png`, {
        frameWidth: 32,
        frameHeight: 32
      });
      this.load.spritesheet(ATTACK_ASSET_KEYS.ICE_SHARD_START, `${pimenAssetPath}/ice-attack/start.png`, {
        frameWidth: 32,
        frameHeight: 32
      });
      this.load.spritesheet(ATTACK_ASSET_KEYS.SLASH, `${pimenAssetPath}/slash.png`, {
        frameWidth: 48,
        frameHeight: 48
      });
    }
    create() {
      this.#createAnimations();
      this.scene.start(SCENE_KEYS.TITLE_SCENE);
    }
    #createAnimations() {
      const animations = DataUtils.getAnimations(this);
      animations.forEach((animation) => {
        const frames = animation.frames ? this.anims.generateFrameNumbers(animation.assetKey, {frames: animation.frames}) : this.anims.generateFrameNumbers(animation.assetKey);
        this.anims.create({
          key: animation.key,
          frames,
          frameRate: animation.frameRate,
          repeat: animation.repeat,
          delay: animation.delay,
          yoyo: animation.yoyo
        });
      });
    }
  };

  // src/common/direction.ts
  var DIRECTION = Object.freeze({
    LEFT: "LEFT",
    RIGHT: "RIGHT",
    UP: "UP",
    DOWN: "DOWN",
    NONE: "NONE"
  });

  // src/utils/controls.ts
  var Controls = class {
    #scene;
    #cursorKeys;
    #lockPlayerInput;
    constructor(scene) {
      this.#scene = scene;
      this.#cursorKeys = this.#scene.input.keyboard.createCursorKeys();
      this.#lockPlayerInput = false;
    }
    getIsInputLocked() {
      return this.#lockPlayerInput;
    }
    setLockInput(value) {
      this.#lockPlayerInput = value;
    }
    wasSpaceKeyPressed() {
      if (this.#cursorKeys === void 0) {
        return false;
      }
      return phaser_default.Input.Keyboard.JustDown(this.#cursorKeys.space);
    }
    wasBackKeyPressed() {
      if (this.#cursorKeys === void 0) {
        return false;
      }
      return phaser_default.Input.Keyboard.JustDown(this.#cursorKeys.shift);
    }
    getDirectionKeyPressedDown() {
      if (this.#cursorKeys === void 0) {
        return DIRECTION.NONE;
      }
      let selectedDirection = DIRECTION.NONE;
      if (this.#cursorKeys.left.isDown) {
        selectedDirection = DIRECTION.LEFT;
      } else if (this.#cursorKeys.right.isDown) {
        selectedDirection = DIRECTION.RIGHT;
      } else if (this.#cursorKeys.up.isDown) {
        selectedDirection = DIRECTION.UP;
      } else if (this.#cursorKeys.down.isDown) {
        selectedDirection = DIRECTION.DOWN;
      }
      return selectedDirection;
    }
    getDirectionKeyJustDown() {
      if (this.#cursorKeys === void 0) {
        return DIRECTION.NONE;
      }
      let selectedDirection = DIRECTION.NONE;
      if (phaser_default.Input.Keyboard.JustDown(this.#cursorKeys.left)) {
        selectedDirection = DIRECTION.LEFT;
      } else if (phaser_default.Input.Keyboard.JustDown(this.#cursorKeys.right)) {
        selectedDirection = DIRECTION.RIGHT;
      } else if (phaser_default.Input.Keyboard.JustDown(this.#cursorKeys.up)) {
        selectedDirection = DIRECTION.UP;
      } else if (phaser_default.Input.Keyboard.JustDown(this.#cursorKeys.down)) {
        selectedDirection = DIRECTION.DOWN;
      }
      return selectedDirection;
    }
  };

  // src/utils/guard.ts
  function exhaustiveGuard(_value) {
    throw new Error(`Error! Reached forbidden guard function with unexpected value: ${JSON.stringify(_value)}`);
  }

  // src/lib/scenes/title-scene.ts
  var MENU_TEXT_STYLE = Object.freeze({
    fontFamily: CUSTOM_FONTS.POKEROGUE,
    color: "#4D4A49",
    fontSize: "35px"
  });
  var PLAYER_INPUT_CURSOR_POSITION = Object.freeze({
    x: 170,
    y: 41
  });
  var MAIN_MENU_OPTIONS = Object.freeze({
    NEW_GAME: "NEW_GAME",
    CONTINUE: "CONTINUE",
    OPTIONS: "OPTIONS"
  });
  var TitleScene = class extends phaser_default.Scene {
    #mainMenuCursorPhaserImageGameObject;
    #controls;
    #selectedMenuOption;
    #isContinueButtonEnabled;
    constructor() {
      super({
        key: SCENE_KEYS.TITLE_SCENE
      });
    }
    create() {
      this.#selectedMenuOption = MAIN_MENU_OPTIONS.NEW_GAME;
      this.#isContinueButtonEnabled = false;
      this.add.image(0, 0, TITLE_ASSET_KEYS.BACKGROUND).setOrigin(0).setScale(0.58);
      this.add.image(this.scale.width / 2, 150, TITLE_ASSET_KEYS.PANEL).setScale(0.25, 0.25).setAlpha(0.5);
      this.add.image(this.scale.width / 2, 150, TITLE_ASSET_KEYS.TITLE).setScale(0.55).setAlpha(0.5);
      const menuBgWidth = 500;
      const menuBg = this.add.image(125, 0, UI_ASSET_KEYS.MENU_BACKGROUND).setOrigin(0).setScale(2.4, 2);
      const menuBgContainer = this.add.container(0, 0, [menuBg]);
      const newGameText = this.add.text(menuBgWidth / 2, 40, "New Game", MENU_TEXT_STYLE).setOrigin(0.5);
      const continueText = this.add.text(menuBgWidth / 2, 90, "Continue", MENU_TEXT_STYLE).setOrigin(0.5);
      if (!this.#isContinueButtonEnabled) {
        continueText.setAlpha(0.5);
      }
      const optionsText = this.add.text(menuBgWidth / 2, 140, "Options", MENU_TEXT_STYLE).setOrigin(0.5);
      const menuContainer = this.add.container(0, 0, [menuBgContainer, newGameText, continueText, optionsText]);
      menuContainer.setPosition(this.scale.width / 2 - menuBgWidth / 2, 300);
      this.#mainMenuCursorPhaserImageGameObject = this.add.image(PLAYER_INPUT_CURSOR_POSITION.x, PLAYER_INPUT_CURSOR_POSITION.y, UI_ASSET_KEYS.CURSOR).setOrigin(0.5).setScale(2.5);
      menuContainer.add(this.#mainMenuCursorPhaserImageGameObject);
      this.add.tween({
        delay: 0,
        duration: 500,
        repeat: -1,
        x: {
          from: PLAYER_INPUT_CURSOR_POSITION.x,
          start: PLAYER_INPUT_CURSOR_POSITION.x,
          to: PLAYER_INPUT_CURSOR_POSITION.x + 3
        },
        targets: this.#mainMenuCursorPhaserImageGameObject
      });
      this.cameras.main.once(phaser_default.Cameras.Scene2D.Events.FADE_OUT_COMPLETE, () => {
        if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.NEW_GAME) {
          this.scene.start(SCENE_KEYS.BATTLE_SCENE);
          return;
        }
        if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.CONTINUE) {
          this.scene.start(SCENE_KEYS.BATTLE_SCENE);
          return;
        }
        if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.OPTIONS) {
          this.scene.start(SCENE_KEYS.BATTLE_SCENE);
          return;
        }
      });
      this.#controls = new Controls(this);
    }
    update() {
      if (this.#controls.getIsInputLocked()) {
        return;
      }
      const wasSpaceKeyPressed = this.#controls.wasSpaceKeyPressed();
      if (wasSpaceKeyPressed) {
        this.cameras.main.fadeOut(500, 0, 0, 0);
        this.#controls.setLockInput(true);
        return;
      }
      let selectedDirection = this.#controls.getDirectionKeyJustDown();
      if (selectedDirection !== DIRECTION.NONE) {
        this.#moveMenuSelectCursor(selectedDirection);
      }
    }
    #moveMenuSelectCursor(direction) {
      this.#updateSelectedOptionFromInput(direction);
      switch (this.#selectedMenuOption) {
        case MAIN_MENU_OPTIONS.NEW_GAME:
          this.#mainMenuCursorPhaserImageGameObject.setY(PLAYER_INPUT_CURSOR_POSITION.y);
          break;
        case MAIN_MENU_OPTIONS.CONTINUE:
          this.#mainMenuCursorPhaserImageGameObject.setY(91);
          break;
        case MAIN_MENU_OPTIONS.OPTIONS:
          this.#mainMenuCursorPhaserImageGameObject.setY(141);
          break;
        default:
          exhaustiveGuard(this.#selectedMenuOption);
      }
    }
    #updateSelectedOptionFromInput(direction) {
      switch (direction) {
        case DIRECTION.UP:
          if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.NEW_GAME) {
            return;
          }
          if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.CONTINUE) {
            this.#selectedMenuOption = MAIN_MENU_OPTIONS.NEW_GAME;
            return;
          }
          if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.OPTIONS && !this.#isContinueButtonEnabled) {
            this.#selectedMenuOption = MAIN_MENU_OPTIONS.NEW_GAME;
            return;
          }
          if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.OPTIONS) {
            this.#selectedMenuOption = MAIN_MENU_OPTIONS.CONTINUE;
            return;
          }
          return;
        case DIRECTION.DOWN:
          if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.NEW_GAME && !this.#isContinueButtonEnabled) {
            this.#selectedMenuOption = MAIN_MENU_OPTIONS.OPTIONS;
            return;
          }
          if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.NEW_GAME) {
            this.#selectedMenuOption = MAIN_MENU_OPTIONS.CONTINUE;
            return;
          }
          if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.CONTINUE) {
            this.#selectedMenuOption = MAIN_MENU_OPTIONS.OPTIONS;
            return;
          }
          if (this.#selectedMenuOption === MAIN_MENU_OPTIONS.OPTIONS) {
            return;
          }
          return;
        case DIRECTION.LEFT:
        case DIRECTION.RIGHT:
        case DIRECTION.NONE:
          return;
        default:
          exhaustiveGuard(direction);
      }
    }
  };

  // src/main.ts
  var game = new phaser_default.Game({
    type: phaser_default.CANVAS,
    scale: {
      parent: "game-container",
      width: 1024,
      height: 576,
      mode: phaser_default.Scale.FIT,
      autoCenter: phaser_default.Scale.CENTER_BOTH
    },
    backgroundColor: "#000000"
  });
  game.scene.add(SCENE_KEYS.PRELOAD_SCENE, PreloadScene);
  game.scene.add(SCENE_KEYS.BATTLE_SCENE, TitleScene);
  game.scene.start(SCENE_KEYS.PRELOAD_SCENE);
})();
