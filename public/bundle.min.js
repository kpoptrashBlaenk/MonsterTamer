(() => {
  // src/lib/phaser.ts
  var phaser_default = window.Phaser;

  // src/lib/scenes/scene-keys.ts
  var SCENE_KEYS = Object.freeze({
    PRELOAD_SCENE: "PRELOAD_SCENE",
    BATTLE_SCENE: "BATTLE_SCENE",
    TITLE_SCENE: "TITLE_SCENE"
  });

  // src/assets/asset-keys.ts
  var BATTLE_BACKGROUND_ASSET_KEYS = Object.freeze({
    FOREST: "FOREST"
  });
  var MONSTER_ASSET_KEYS = Object.freeze({
    IGUANIGNITE: "IGUANIGNITE",
    CARNODUSK: "CARNODUSK"
  });
  var BATTLE_ASSET_KEYS = Object.freeze({
    HEALTH_BAR_BACKGROUND: "HEALTH_BAR_BACKGROUND"
  });
  var HEALTH_BAR_ASSET_KEYS = Object.freeze({
    LEFT_CAP: "LEFT_CAP",
    RIGHT_CAP: "RIGHT_CAP",
    MIDDLE: "MIDDLE",
    LEFT_CAP_SHADOW: "LEFT_CAP_SHADOW",
    RIGHT_CAP_SHADOW: "RIGHT_CAP_SHADOW",
    MIDDLE_SHADOW: "MIDDLE_SHADOW"
  });
  var UI_ASSET_KEYS = Object.freeze({
    CURSOR: "CURSOR",
    MENU_BACKGROUND: "MENU_BACKGROUND"
  });
  var DATA_ASSET_KEYS = Object.freeze({
    ATTACKS: "ATTACKS",
    ANIMATIONS: "ANIMATIONS"
  });
  var ATTACK_ASSET_KEYS = Object.freeze({
    ICE_SHARD: "ICE_SHARD",
    ICE_SHARD_START: "ICE_SHARD_START",
    SLASH: "SLASH"
  });
  var TITLE_ASSET_KEYS = Object.freeze({
    BACKGROUND: "BACKGROUND",
    TITLE: "TITLE",
    PANEL: "PANEL"
  });

  // src/assets/font-keys.ts
  var CUSTOM_FONTS = Object.freeze({
    KENNEY: "Kenney-Future-Narrow",
    POKEROGUE: "PokeRogue"
  });

  // src/lib/webfontloader.ts
  var webfontloader_default = window.WebFont;

  // src/assets/web-font-file-loader.ts
  var WebFontFileLoader = class extends phaser_default.Loader.File {
    #fontNames;
    constructor(loader, fontNames) {
      super(loader, {
        type: "webfont",
        key: fontNames.toString()
      });
      this.#fontNames = fontNames;
    }
    load() {
      webfontloader_default.load({
        custom: {
          families: this.#fontNames
        },
        active: () => {
          this.loader.nextFile(this, true);
        },
        inactive: () => {
          console.error(`Failed to load custom fonts ${JSON.stringify(this.#fontNames)}`);
          this.loader.nextFile(this, false);
        }
      });
    }
  };

  // src/utils/data-utils.ts
  var DataUtils = class {
    static getMonsterAttack(scene, attackId) {
      const data = scene.cache.json.get(DATA_ASSET_KEYS.ATTACKS);
      return data.find((attack) => attack.id === attackId);
    }
    static getAnimations(scene) {
      return scene.cache.json.get(DATA_ASSET_KEYS.ANIMATIONS);
    }
  };

  // src/lib/scenes/preload-scene.ts
  var PreloadScene = class extends phaser_default.Scene {
    constructor() {
      super({
        key: SCENE_KEYS.PRELOAD_SCENE
      });
    }
    preload() {
      const monsterTamerAssetPath = "../assets/images/monster-tamer";
      const kenneysAssetPath = "../assets/images/kenneys-assets";
      const pimenAssetPath = "../assets/images/pimen";
      this.load.image(TITLE_ASSET_KEYS.BACKGROUND, `${monsterTamerAssetPath}/ui/title/background.png`);
      this.load.image(TITLE_ASSET_KEYS.PANEL, `${monsterTamerAssetPath}/ui/title/title_background.png`);
      this.load.image(TITLE_ASSET_KEYS.TITLE, `${monsterTamerAssetPath}/ui/title/title_text.png`);
      this.load.image(BATTLE_BACKGROUND_ASSET_KEYS.FOREST, `${monsterTamerAssetPath}/battle-backgrounds/forest-background.png`);
      this.load.image(BATTLE_ASSET_KEYS.HEALTH_BAR_BACKGROUND, `${kenneysAssetPath}/ui-space-expansion/custom-ui.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.RIGHT_CAP, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_green_right.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.MIDDLE, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_green_mid.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.LEFT_CAP, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_green_left.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.RIGHT_CAP_SHADOW, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_shadow_right.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.MIDDLE_SHADOW, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_shadow_mid.png`);
      this.load.image(HEALTH_BAR_ASSET_KEYS.LEFT_CAP_SHADOW, `${kenneysAssetPath}/ui-space-expansion/barHorizontal_shadow_left.png`);
      this.load.image(MONSTER_ASSET_KEYS.CARNODUSK, `${monsterTamerAssetPath}/monsters/carnodusk.png`);
      this.load.image(MONSTER_ASSET_KEYS.IGUANIGNITE, `${monsterTamerAssetPath}/monsters/iguanignite.png`);
      this.load.image(UI_ASSET_KEYS.CURSOR, `${monsterTamerAssetPath}/ui/cursor.png`);
      this.load.image(UI_ASSET_KEYS.MENU_BACKGROUND, `${kenneysAssetPath}/ui-space-expansion/glassPanel.png`);
      this.load.json(DATA_ASSET_KEYS.ATTACKS, "assets/data/attacks.json");
      this.load.json(DATA_ASSET_KEYS.ANIMATIONS, "assets/data/animations.json");
      this.load.addFile(new WebFontFileLoader(this.load, [CUSTOM_FONTS.POKEROGUE]));
      this.load.spritesheet(ATTACK_ASSET_KEYS.ICE_SHARD, `${pimenAssetPath}/ice-attack/active.png`, {
        frameWidth: 32,
        frameHeight: 32
      });
      this.load.spritesheet(ATTACK_ASSET_KEYS.ICE_SHARD_START, `${pimenAssetPath}/ice-attack/start.png`, {
        frameWidth: 32,
        frameHeight: 32
      });
      this.load.spritesheet(ATTACK_ASSET_KEYS.SLASH, `${pimenAssetPath}/slash.png`, {
        frameWidth: 48,
        frameHeight: 48
      });
    }
    create() {
      this.#createAnimations();
      this.scene.start(SCENE_KEYS.TITLE_SCENE);
    }
    #createAnimations() {
      const animations = DataUtils.getAnimations(this);
      animations.forEach((animation) => {
        const frames = animation.frames ? this.anims.generateFrameNumbers(animation.assetKey, {frames: animation.frames}) : this.anims.generateFrameNumbers(animation.assetKey);
        this.anims.create({
          key: animation.key,
          frames,
          frameRate: animation.frameRate,
          repeat: animation.repeat,
          delay: animation.delay,
          yoyo: animation.yoyo
        });
      });
    }
  };

  // src/main.ts
  var game = new phaser_default.Game({
    type: phaser_default.CANVAS,
    scale: {
      parent: "game-container",
      width: 1024,
      height: 576,
      mode: phaser_default.Scale.FIT,
      autoCenter: phaser_default.Scale.CENTER_BOTH
    },
    backgroundColor: "#000000"
  });
  game.scene.add(SCENE_KEYS.PRELOAD_SCENE, PreloadScene);
  game.scene.start(SCENE_KEYS.PRELOAD_SCENE);
})();
